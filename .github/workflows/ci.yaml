name: DVC Pipeline

# Define when this workflow will run
on:
  push:
    branches: [ main, master ]  # Run on pushes to main or master branch
  pull_request:
    branches: [ main, master ]  # Run on PRs to main or master branch
  workflow_dispatch:  # Allow manual triggers from GitHub UI

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Check out the repository code
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for DVC to work properly
      
      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      # Install your package in development mode
      - name: Install package in development mode
        run: pip install -e .
      
      # Configure DVC
      - name: Configure DVC
        run: |
          pip install dvc dvc-s3
          # Add any DVC remote setup here if needed
      
      # Pull DVC data (if needed)
      - name: Pull DVC data
        run: dvc pull
        env:
          # Add any environment variables needed for DVC remote
          # AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          # AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      
      # Run DVC pipeline
      - name: Run DVC pipeline
        run: dvc repro


      # - name: Run model tests
      #   env:
      #     CAPSTONE_TEST: ${{ secrets.CAPSTONE_TEST }}
      #   run: |
      #     python -m unittest tests/test_model.py

      # - name: Promote model to production
      #   if: success()
      #   env:
      #     CAPSTONE_TEST: ${{ secrets.CAPSTONE_TEST }}
      #   run: python scripts/promote_model.py

      # - name: Run Flask app tests
      #   if: success()
      #   env:
      #     CAPSTONE_TEST: ${{ secrets.CAPSTONE_TEST }}
      #   run: python -m unittest tests/test_flask_app.py

      # - name: Login to AWS ECR
      #   if: success()
      #   run: |
      #       aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
      #       aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #       aws configure set region ${{ secrets.AWS_REGION }}
      #       aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      # - name: Build Docker image
      #   run: |
      #       docker build -t ${{ secrets.ECR_REPOSITORY }}:latest .

      # - name: Tag Docker image
      #   run: |
      #       docker tag ${{ secrets.ECR_REPOSITORY }}:latest \
      #       ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest

    
      # - name: Check Docker Authentication
      #   run: docker info

      # - name: Push Docker image to ECR
      #   run: |
      #     docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest

      # - name: Set Up kubectl
      #   uses: azure/setup-kubectl@v3
      #   with:
      #     version: 'latest'
      
      # - name: Update kubeconfig
      #   run: |
      #     aws eks update-kubeconfig --region us-east-1 --name flask-app-cluster

      # - name: Create Kubernetes Secret
      #   run: |
      #     kubectl create secret generic capstone-secret \
      #       --from-literal=CAPSTONE_TEST=${{ secrets.CAPSTONE_TEST }} --dry-run=client -o yaml | kubectl apply -f -

      # - name: Deploy to EKS
      #   run: |
      #     kubectl apply -f deployment.yaml